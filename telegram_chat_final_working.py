#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram Chat Final Working Viewer
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import json
import os
from datetime import datetime
import threading
import math

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
try:
    from PIL import Image, ImageDraw, ImageFont
    PIL_AVAILABLE = True
except ImportError:
    PIL_AVAILABLE = False

class TelegramChatFinalWorking:
    def __init__(self, root):
        self.root = root
        self.root.title("Telegram Chat Final Working Viewer")
        self.root.geometry("1000x700")
        self.root.configure(bg='#17212b')
        
        # –î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
        self.chat_data = None
        self.messages = []
        self.filtered_messages = []
        self.current_chat_name = ""
        self.search_query = ""
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.messages_per_page = 20
        self.current_page = 0
        self.total_pages = 0
        
        # –¶–≤–µ—Ç–∞ Telegram Web
        self.colors = {
            'bg': '#17212b',
            'chat_bg': '#0e1621',
            'my_message': '#2b5278',
            'other_message': '#182533',
            'text': '#ffffff',
            'time': '#708499',
            'name': '#5bb3f0',
            'service': '#708499',
            'button': '#5bb3f0',
            'search_bg': '#232e3c',
            'date_bg': '#232e3c',
            'border': '#2f3b4c'
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Canvas
        self.canvas_width = 800
        self.canvas_height = 500
        self.message_padding = 20
        self.bubble_padding = 12
        self.max_bubble_width = 400
        
        self.setup_ui()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setup_top_panel()
        self.setup_search_panel()
        self.setup_canvas_area()
        self.setup_navigation_panel()
        self.setup_bottom_panel()
        
    def setup_top_panel(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏"""
        top_frame = tk.Frame(self.root, bg=self.colors['bg'], height=60)
        top_frame.pack(fill='x', padx=10, pady=5)
        top_frame.pack_propagate(False)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        load_btn = tk.Button(
            top_frame, 
            text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å JSON",
            command=self.load_chat_file,
            bg=self.colors['button'],
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            padx=20,
            cursor='hand2'
        )
        load_btn.pack(side='left', pady=15)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        self.chat_title = tk.Label(
            top_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —á–∞—Ç–∞",
            bg=self.colors['bg'],
            fg=self.colors['text'],
            font=('Arial', 12, 'bold')
        )
        self.chat_title.pack(side='left', padx=20, pady=15)
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        export_btn = tk.Button(
            top_frame,
            text="üñºÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –≤ PNG(50/50)",
            command=self.export_to_image_simple,
            bg='#4CAF50',
            fg='white',
            font=('Arial', 10, 'bold'),
            relief='flat',
            padx=20,
            cursor='hand2',
            state='disabled'
        )
        export_btn.pack(side='right', pady=15)
        self.export_btn = export_btn
        
    def setup_search_panel(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞"""
        search_frame = tk.Frame(self.root, bg=self.colors['bg'], height=40)
        search_frame.pack(fill='x', padx=10, pady=(0, 5))
        search_frame.pack_propagate(False)
        
        tk.Label(
            search_frame,
            text="üîç",
            bg=self.colors['bg'],
            fg=self.colors['text'],
            font=('Arial', 12)
        ).pack(side='left', padx=(0, 5), pady=10)
        
        self.search_var = tk.StringVar()
        self.search_entry = tk.Entry(
            search_frame,
            textvariable=self.search_var,
            bg=self.colors['search_bg'],
            fg=self.colors['text'],
            font=('Arial', 10),
            relief='flat',
            bd=1,
            insertbackground=self.colors['text']
        )
        self.search_entry.pack(side='left', fill='x', expand=True, padx=(0, 10), pady=10, ipady=5)
        self.search_entry.bind('<KeyRelease>', self.on_search)
        
        clear_btn = tk.Button(
            search_frame,
            text="‚úï",
            command=self.clear_search,
            bg=self.colors['other_message'],
            fg=self.colors['text'],
            font=('Arial', 9),
            relief='flat',
            width=3,
            cursor='hand2'
        )
        clear_btn.pack(side='right', pady=10)
        
    def setup_canvas_area(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Canvas –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–∞"""
        canvas_frame = tk.Frame(self.root, bg=self.colors['chat_bg'], relief='solid', bd=1)
        canvas_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        self.canvas = tk.Canvas(
            canvas_frame,
            bg=self.colors['chat_bg'],
            highlightthickness=0,
            scrollregion=(0, 0, 0, 2000)
        )
        
        scrollbar = ttk.Scrollbar(canvas_frame, orient="vertical", command=self.canvas.yview)
        self.canvas.configure(yscrollcommand=scrollbar.set)
        
        self.canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        self.canvas.bind('<Configure>', self.on_canvas_configure)
        self.canvas.bind('<MouseWheel>', self.on_mousewheel)
        
    def setup_navigation_panel(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        nav_frame = tk.Frame(self.root, bg=self.colors['bg'], height=40)
        nav_frame.pack(fill='x', padx=10, pady=5)
        nav_frame.pack_propagate(False)
        
        self.prev_btn = tk.Button(
            nav_frame,
            text="‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ",
            command=self.prev_page,
            bg=self.colors['button'],
            fg='white',
            font=('Arial', 9),
            relief='flat',
            padx=15,
            cursor='hand2',
            state='disabled'
        )
        self.prev_btn.pack(side='left', pady=5)
        
        self.page_label = tk.Label(
            nav_frame,
            text="–°—Ç—Ä–∞–Ω–∏—Ü–∞ 0 –∏–∑ 0",
            bg=self.colors['bg'],
            fg=self.colors['text'],
            font=('Arial', 10)
        )
        self.page_label.pack(side='left', padx=20, pady=5)
        
        self.next_btn = tk.Button(
            nav_frame,
            text="–°–ª–µ–¥—É—é—â–∏–µ ‚ñ∂",
            command=self.next_page,
            bg=self.colors['button'],
            fg='white',
            font=('Arial', 9),
            relief='flat',
            padx=15,
            cursor='hand2',
            state='disabled'
        )
        self.next_btn.pack(side='left', pady=5)
        
        last_btn = tk.Button(
            nav_frame,
            text="‚è≠ –ö –ø–æ—Å–ª–µ–¥–Ω–∏–º",
            command=self.go_to_last,
            bg=self.colors['other_message'],
            fg=self.colors['text'],
            font=('Arial', 9),
            relief='flat',
            padx=15,
            cursor='hand2',
            state='disabled'
        )
        last_btn.pack(side='right', pady=5)
        self.last_btn = last_btn
        
    def setup_bottom_panel(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏"""
        bottom_frame = tk.Frame(self.root, bg=self.colors['bg'], height=30)
        bottom_frame.pack(fill='x', padx=10, pady=5)
        bottom_frame.pack_propagate(False)
        
        self.stats_label = tk.Label(
            bottom_frame,
            text="–ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞",
            bg=self.colors['bg'],
            fg=self.colors['time'],
            font=('Arial', 9)
        )
        self.stats_label.pack(side='left', pady=5)
        
    def on_canvas_configure(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ Canvas"""
        self.canvas_width = event.width
        self.redraw_canvas()
        
    def on_mousewheel(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏"""
        self.canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
    def load_chat_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–∞ —á–∞—Ç–∞"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ Telegram",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if file_path:
            self.chat_title.config(text="–ó–∞–≥—Ä—É–∑–∫–∞...")
            self.root.update()
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    self.chat_data = json.load(f)
                
                self.current_chat_name = self.chat_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç')
                self.messages = self.chat_data.get('messages', [])
                self.filtered_messages = self.messages.copy()
                
                self.chat_title.config(text=f"üí¨ {self.current_chat_name}")
                
                self.setup_pagination()
                self.go_to_last()
                
                self.export_btn.config(state='normal')
                self.last_btn.config(state='normal')
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª:\\n{str(e)}")
                self.chat_title.config(text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
    
    def setup_pagination(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        self.total_pages = max(1, (len(self.filtered_messages) + self.messages_per_page - 1) // self.messages_per_page)
        self.current_page = 0
        self.update_navigation()
    
    def update_navigation(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        self.page_label.config(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.current_page + 1} –∏–∑ {self.total_pages}")
        
        self.prev_btn.config(state='normal' if self.current_page > 0 else 'disabled')
        self.next_btn.config(state='normal' if self.current_page < self.total_pages - 1 else 'disabled')
        
        self.update_stats()
    
    def prev_page(self):
        """–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        if self.current_page > 0:
            self.current_page -= 1
            self.redraw_canvas()
    
    def next_page(self):
        """–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        if self.current_page < self.total_pages - 1:
            self.current_page += 1
            self.redraw_canvas()
    
    def go_to_last(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º"""
        self.current_page = self.total_pages - 1
        self.redraw_canvas()
    
    def redraw_canvas(self):
        """–ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ Canvas —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        if not self.filtered_messages:
            self.canvas.delete("all")
            self.canvas.create_text(
                self.canvas_width // 2, 100,
                text="–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                fill=self.colors['text'],
                font=('Arial', 14)
            )
            return
        
        self.canvas.delete("all")
        
        start_idx = self.current_page * self.messages_per_page
        end_idx = min(start_idx + self.messages_per_page, len(self.filtered_messages))
        page_messages = self.filtered_messages[start_idx:end_idx]
        
        y_pos = 20
        current_date = None
        
        for message in page_messages:
            msg_date = self.get_message_date(message)
            if msg_date != current_date:
                y_pos = self.draw_date_separator(msg_date, y_pos)
                current_date = msg_date
            
            if message.get('type') == 'service':
                y_pos = self.draw_service_message(message, y_pos)
            else:
                y_pos = self.draw_message_bubble(message, y_pos)
        
        self.canvas.configure(scrollregion=(0, 0, 0, y_pos + 50))
        self.update_navigation()
        self.canvas.yview_moveto(1.0)
    
    def draw_date_separator(self, date_str, y_pos):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –¥–Ω—è"""
        text_width = len(date_str) * 8
        bg_width = text_width + 20
        bg_height = 25
        
        x_center = self.canvas_width // 2
        bg_x1 = x_center - bg_width // 2
        bg_x2 = x_center + bg_width // 2
        
        self.canvas.create_rectangle(
            bg_x1, y_pos, bg_x2, y_pos + bg_height,
            fill=self.colors['date_bg'],
            outline="",
            tags="date_separator"
        )
        
        self.canvas.create_text(
            x_center, y_pos + bg_height // 2,
            text=date_str,
            fill=self.colors['time'],
            font=('Arial', 10),
            tags="date_separator"
        )
        
        return y_pos + bg_height + 15
    
    def draw_service_message(self, message, y_pos):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        action = message.get('action', '')
        actor = message.get('actor', '')
        time_str = self.format_time(message.get('date', ''))
        
        service_text = f"{actor} {self.get_action_text(action)} ‚Ä¢ {time_str}"
        x_center = self.canvas_width // 2
        
        self.canvas.create_text(
            x_center, y_pos,
            text=service_text,
            fill=self.colors['service'],
            font=('Arial', 10),
            tags="service"
        )
        
        return y_pos + 25
    
    def draw_message_bubble(self, message, y_pos):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—É–∑—ã—Ä—å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        from_user = message.get('from', '')
        from_id = message.get('from_id', '')
        text = message.get('text', '')
        time_str = self.format_time(message.get('date', ''))
        
        is_my_message = 'user6582117962' in from_id
        
        if isinstance(text, list):
            full_text = ""
            for item in text:
                if isinstance(item, dict):
                    full_text += item.get('text', '')
                else:
                    full_text += str(item)
            text = full_text
        
        if not text.strip():
            text = self.get_media_text(message)
        
        if len(text) > 200:
            text = text[:200] + "..."
        
        lines = self.wrap_text(text, 40)
        
        line_height = 18
        text_height = len(lines) * line_height
        name_height = 20 if (not is_my_message and from_user) else 0
        time_height = 15
        
        bubble_width = min(self.max_bubble_width, max(200, max(len(line) * 8 for line in lines) + 20))
        bubble_height = name_height + text_height + time_height + self.bubble_padding * 2
        
        if is_my_message:
            bubble_x = self.canvas_width - bubble_width - self.message_padding
            bubble_color = self.colors['my_message']
        else:
            bubble_x = self.message_padding
            bubble_color = self.colors['other_message']
        
        self.draw_rounded_rectangle(
            bubble_x, y_pos, bubble_x + bubble_width, y_pos + bubble_height,
            radius=18, fill=bubble_color, tags="message_bubble"
        )
        
        if is_my_message:
            self.canvas.create_polygon(
                bubble_x + bubble_width, y_pos + bubble_height - 15,
                bubble_x + bubble_width + 8, y_pos + bubble_height - 8,
                bubble_x + bubble_width, y_pos + bubble_height - 5,
                fill=bubble_color, outline="", tags="message_bubble"
            )
        else:
            self.canvas.create_polygon(
                bubble_x, y_pos + bubble_height - 15,
                bubble_x - 8, y_pos + bubble_height - 8,
                bubble_x, y_pos + bubble_height - 5,
                fill=bubble_color, outline="", tags="message_bubble"
            )
        
        text_x = bubble_x + self.bubble_padding
        text_y = y_pos + self.bubble_padding
        
        if not is_my_message and from_user:
            self.canvas.create_text(
                text_x, text_y,
                text=from_user,
                fill=self.colors['name'],
                font=('Arial', 10, 'bold'),
                anchor='nw',
                tags="message_text"
            )
            text_y += name_height
        
        for line in lines:
            self.canvas.create_text(
                text_x, text_y,
                text=line,
                fill=self.colors['text'],
                font=('Arial', 11),
                anchor='nw',
                tags="message_text"
            )
            text_y += line_height
        
        time_x = bubble_x + bubble_width - self.bubble_padding - len(time_str) * 6
        time_y = y_pos + bubble_height - time_height - 5
        
        self.canvas.create_text(
            time_x, time_y,
            text=time_str,
            fill=self.colors['time'],
            font=('Arial', 9),
            anchor='nw',
            tags="message_time"
        )
        
        return y_pos + bubble_height + 10
    
    def draw_rounded_rectangle(self, x1, y1, x2, y2, radius=10, **kwargs):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–∞ Canvas"""
        points = []
        
        for i in range(0, 90, 10):
            x = x1 + radius - radius * math.cos(math.radians(i))
            y = y1 + radius - radius * math.sin(math.radians(i))
            points.extend([x, y])
        
        for i in range(90, 180, 10):
            x = x2 - radius - radius * math.cos(math.radians(i))
            y = y1 + radius - radius * math.sin(math.radians(i))
            points.extend([x, y])
        
        for i in range(180, 270, 10):
            x = x2 - radius - radius * math.cos(math.radians(i))
            y = y2 - radius - radius * math.sin(math.radians(i))
            points.extend([x, y])
        
        for i in range(270, 360, 10):
            x = x1 + radius - radius * math.cos(math.radians(i))
            y = y2 - radius - radius * math.sin(math.radians(i))
            points.extend([x, y])
        
        return self.canvas.create_polygon(points, smooth=True, **kwargs)
    
    def wrap_text(self, text, max_chars):
        """–†–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–∏"""
        words = text.split()
        lines = []
        current_line = []
        current_length = 0
        
        for word in words:
            if current_length + len(word) + 1 <= max_chars:
                current_line.append(word)
                current_length += len(word) + 1
            else:
                if current_line:
                    lines.append(' '.join(current_line))
                current_line = [word]
                current_length = len(word)
        
        if current_line:
            lines.append(' '.join(current_line))
        
        return lines if lines else [""]
    
    def get_media_text(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
        if 'photo' in message:
            return "üì∑ –§–æ—Ç–æ"
        elif message.get('media_type') == 'sticker':
            emoji = message.get('sticker_emoji', 'üé≠')
            return f"{emoji} –°—Ç–∏–∫–µ—Ä"
        elif message.get('media_type') == 'video_message':
            return "üé• –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ"
        elif message.get('media_type') == 'video_file':
            return "üé• –í–∏–¥–µ–æ"
        elif message.get('media_type') == 'audio_file':
            return f"üéµ {message.get('file_name', '–ê—É–¥–∏–æ—Ñ–∞–π–ª')}"
        elif message.get('media_type') == 'voice_message':
            return "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        elif message.get('media_type') == 'animation':
            return "üé¨ GIF –∞–Ω–∏–º–∞—Ü–∏—è"
        elif 'file' in message:
            return f"üìé {message.get('file_name', '–§–∞–π–ª')}"
        else:
            return "–°–æ–æ–±—â–µ–Ω–∏–µ"
    
    def on_search(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞"""
        query = self.search_var.get().lower().strip()
        self.search_query = query
        
        if not query:
            self.filtered_messages = self.messages.copy()
        else:
            self.filtered_messages = []
            for msg in self.messages:
                text = msg.get('text', '')
                if isinstance(text, list):
                    full_text = ""
                    for item in text:
                        if isinstance(item, dict):
                            full_text += item.get('text', '')
                        else:
                            full_text += str(item)
                    text = full_text
                
                from_user = msg.get('from', '')
                
                if (query in text.lower() or 
                    query in from_user.lower() or
                    query in msg.get('file_name', '').lower()):
                    self.filtered_messages.append(msg)
        
        self.setup_pagination()
        self.go_to_last()
    
    def clear_search(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞"""
        self.search_var.set("")
        self.on_search()
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.messages:
            self.stats_label.config(text="–ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞")
            return
        
        total_messages = len(self.messages)
        filtered_count = len(self.filtered_messages)
        
        users = set()
        for msg in self.messages:
            if 'from' in msg:
                users.add(msg.get('from'))
        
        stats_text = f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}"
        if self.search_query:
            stats_text += f" | –ù–∞–π–¥–µ–Ω–æ: {filtered_count}"
        stats_text += f" | –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(users)}"
        
        start_idx = self.current_page * self.messages_per_page + 1
        end_idx = min((self.current_page + 1) * self.messages_per_page, filtered_count)
        stats_text += f" | –ü–æ–∫–∞–∑–∞–Ω–æ: {start_idx}-{end_idx}"
        
        self.stats_label.config(text=stats_text)
    
    def format_time(self, date_str):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            dt = datetime.fromisoformat(date_str.replace('T', ' ').replace('Z', ''))
            return dt.strftime('%H:%M')
        except:
            return "00:00"
    
    def get_message_date(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            date_str = message.get('date', '')
            dt = datetime.fromisoformat(date_str.replace('T', ' ').replace('Z', ''))
            return dt.strftime('%d.%m.%Y')
        except:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
    
    def get_action_text(self, action):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–ª—É–∂–µ–±–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        actions = {
            'joined_telegram': '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ Telegram',
            'left_chat': '–ø–æ–∫–∏–Ω—É–ª —á–∞—Ç',
            'joined_chat': '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É',
            'created_chat': '—Å–æ–∑–¥–∞–ª —á–∞—Ç'
        }
        return actions.get(action, action)
    
    def export_to_image_simple(self):
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        if not self.messages:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        if not PIL_AVAILABLE:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: pip install pillow")
            return
        
        # –ü—Ä–æ—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        dialog = SimpleExportDialog(self.root, len(self.filtered_messages))
        if not dialog.result:
            return
        
        max_messages = dialog.result
        
        # –í—ã–±–æ—Ä –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –ß–ï–¢–ö–ò–ô –ò –ü–†–û–°–¢–û–ô
        default_filename = f"{self.current_chat_name.replace(' ', '_')}_chat_{max_messages}msg.png"
        
        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞",
            defaultextension=".png",
            filetypes=[("PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
            initialfilename=default_filename
        )
        
        if not file_path:
            messagebox.showinfo("–û—Ç–º–µ–Ω–∞", "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_window = SimpleProgressWindow(self.root)
        
        def create_image():
            try:
                progress_window.update_status("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
                
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                messages_to_export = self.filtered_messages[-max_messages:] if len(self.filtered_messages) > max_messages else self.filtered_messages
                
                progress_window.update_status("–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.create_simple_image(messages_to_export, file_path, progress_window)
                
                progress_window.close()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if os.path.exists(file_path):
                    file_size = os.path.getsize(file_path) / 1024  # –≤ –ö–ë
                    messagebox.showinfo(
                        "–£—Å–ø–µ—Ö!", 
                        f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\\n\\n"
                        f"üìÅ –§–∞–π–ª: {file_path}\\n"
                        f"üìä –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages_to_export)}\\n"
                        f"üíæ –†–∞–∑–º–µ—Ä: {file_size:.1f} –ö–ë"
                    )
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                    
            except Exception as e:
                progress_window.close()
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\\n{str(e)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=create_image)
        thread.daemon = True
        thread.start()
    
    def create_simple_image(self, messages, output_path, progress_window):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        width = 1200
        background_color = (23, 33, 43)  # #17212b
        text_color = (255, 255, 255)
        my_bubble_color = (43, 82, 120)  # #2b5278
        other_bubble_color = (24, 37, 51)  # #182533
        
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        estimated_height = len(messages) * 80 + 200
        height = min(estimated_height, 8000)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGB', (width, height), background_color)
        draw = ImageDraw.Draw(img)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç
        try:
            font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 16)
            font_small = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 12)
            font_bold = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 18)
        except:
            font = ImageFont.load_default()
            font_small = ImageFont.load_default()
            font_bold = ImageFont.load_default()
        
        progress_window.update_status("–†–∏—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞...")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = f"üí¨ {self.current_chat_name}"
        title_bbox = draw.textbbox((0, 0), title, font=font_bold)
        title_width = title_bbox[2] - title_bbox[0]
        title_x = (width - title_width) // 2
        draw.text((title_x, 30), title, fill=text_color, font=font_bold)
        
        subtitle = f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π"
        subtitle_bbox = draw.textbbox((0, 0), subtitle, font=font_small)
        subtitle_width = subtitle_bbox[2] - subtitle_bbox[0]
        subtitle_x = (width - subtitle_width) // 2
        draw.text((subtitle_x, 60), subtitle, fill=(112, 132, 153), font=font_small)
        
        # –†–∏—Å—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        y_pos = 120
        current_date = None
        
        for i, message in enumerate(messages):
            if y_pos > height - 100:
                break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if i % 10 == 0:
                progress = int((i / len(messages)) * 100)
                progress_window.update_status(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i+1}/{len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π ({progress}%)")
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–Ω—è
            msg_date = self.get_message_date(message)
            if msg_date != current_date:
                y_pos = self.draw_simple_date_separator(draw, msg_date, y_pos, width, font_small)
                current_date = msg_date
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ
            if message.get('type') == 'service':
                y_pos = self.draw_simple_service_message(draw, message, y_pos, width, font_small)
            else:
                y_pos = self.draw_simple_message(draw, message, y_pos, width, font, font_small, my_bubble_color, other_bubble_color, text_color)
        
        progress_window.update_status("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –≤—ã—Å–æ—Ç—ã
        final_height = min(y_pos + 50, height)
        img = img.crop((0, 0, width, final_height))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        img.save(output_path, 'PNG', quality=100)
    
    def draw_simple_date_separator(self, draw, date_str, y_pos, width, font):
        """–ü—Ä–æ—Å—Ç–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–∞—Ç—ã"""
        bbox = draw.textbbox((0, 0), date_str, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        
        bg_width = text_width + 20
        bg_height = text_height + 10
        bg_x = (width - bg_width) // 2
        
        # –§–æ–Ω
        draw.rectangle([bg_x, y_pos, bg_x + bg_width, y_pos + bg_height], fill=(35, 46, 60))
        
        # –¢–µ–∫—Å—Ç
        text_x = bg_x + 10
        text_y = y_pos + 5
        draw.text((text_x, text_y), date_str, fill=(112, 132, 153), font=font)
        
        return y_pos + bg_height + 20
    
    def draw_simple_service_message(self, draw, message, y_pos, width, font):
        """–ü—Ä–æ—Å—Ç–æ–µ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        action = message.get('action', '')
        actor = message.get('actor', '')
        time_str = self.format_time(message.get('date', ''))
        
        service_text = f"{actor} {self.get_action_text(action)} ‚Ä¢ {time_str}"
        
        bbox = draw.textbbox((0, 0), service_text, font=font)
        text_width = bbox[2] - bbox[0]
        text_x = (width - text_width) // 2
        
        draw.text((text_x, y_pos), service_text, fill=(112, 132, 153), font=font)
        
        return y_pos + 30
    
    def draw_simple_message(self, draw, message, y_pos, width, font, font_small, my_color, other_color, text_color):
        """–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        from_user = message.get('from', '')
        from_id = message.get('from_id', '')
        text = message.get('text', '')
        time_str = self.format_time(message.get('date', ''))
        
        is_my_message = 'user6582117962' in from_id
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        if isinstance(text, list):
            full_text = ""
            for item in text:
                if isinstance(item, dict):
                    full_text += item.get('text', '')
                else:
                    full_text += str(item)
            text = full_text
        
        if not text.strip():
            text = self.get_media_text(message)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(text) > 300:
            text = text[:300] + "..."
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        max_chars = 50
        lines = []
        words = text.split()
        current_line = []
        current_length = 0
        
        for word in words:
            if current_length + len(word) + 1 <= max_chars:
                current_line.append(word)
                current_length += len(word) + 1
            else:
                if current_line:
                    lines.append(' '.join(current_line))
                current_line = [word]
                current_length = len(word)
        
        if current_line:
            lines.append(' '.join(current_line))
        
        if not lines:
            lines = [""]
        
        # –†–∞–∑–º–µ—Ä—ã –ø—É–∑—ã—Ä—å–∫–∞
        line_height = 20
        padding = 15
        max_line_width = max(len(line) for line in lines) * 8
        bubble_width = min(500, max(200, max_line_width + padding * 2))
        
        name_height = 20 if (not is_my_message and from_user) else 0
        text_height = len(lines) * line_height
        time_height = 15
        bubble_height = name_height + text_height + time_height + padding * 2
        
        # –ü–æ–∑–∏—Ü–∏—è –ø—É–∑—ã—Ä—å–∫–∞
        if is_my_message:
            bubble_x = width - bubble_width - 50
            bubble_color = my_color
        else:
            bubble_x = 50
            bubble_color = other_color
        
        # –†–∏—Å—É–µ–º –ø—É–∑—ã—Ä–µ–∫ (–ø—Ä–æ—Å—Ç–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)
        draw.rectangle([bubble_x, y_pos, bubble_x + bubble_width, y_pos + bubble_height], fill=bubble_color)
        
        # –¢–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ –ø—É–∑—ã—Ä—å–∫–∞
        text_x = bubble_x + padding
        text_y = y_pos + padding
        
        # –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if not is_my_message and from_user:
            draw.text((text_x, text_y), from_user, fill=(91, 179, 240), font=font)
            text_y += name_height
        
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        for line in lines:
            draw.text((text_x, text_y), line, fill=text_color, font=font)
            text_y += line_height
        
        # –í—Ä–µ–º—è
        time_x = bubble_x + bubble_width - padding - len(time_str) * 6
        time_y = y_pos + bubble_height - time_height - 5
        draw.text((time_x, time_y), time_str, fill=(112, 132, 153), font=font_small)
        
        return y_pos + bubble_height + 15

class SimpleExportDialog:
    def __init__(self, parent, max_messages):
        self.result = None
        
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("–≠–∫—Å–ø–æ—Ä—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        self.dialog.geometry("400x250")
        self.dialog.configure(bg='#17212b')
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        x = parent.winfo_rootx() + 50
        y = parent.winfo_rooty() + 50
        self.dialog.geometry(f"+{x}+{y}")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(
            self.dialog,
            text="üñºÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            bg='#17212b',
            fg='white',
            font=('Arial', 14, 'bold')
        ).pack(pady=20)
        
        tk.Label(
            self.dialog,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π:",
            bg='#17212b',
            fg='white',
            font=('Arial', 11)
        ).pack(pady=(0, 15))
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã
        self.var = tk.IntVar(value=min(50, max_messages))
        
        options = [
            (20, "20 —Å–æ–æ–±—â–µ–Ω–∏–π (–±—ã—Å—Ç—Ä–æ)"),
            (50, "50 —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ)"),
            (100, "100 —Å–æ–æ–±—â–µ–Ω–∏–π (–º–µ–¥–ª–µ–Ω–Ω–æ)"),
            (min(200, max_messages), f"–ú–∞–∫—Å–∏–º—É–º ({min(200, max_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π)")
        ]
        
        for value, text in options:
            if value <= max_messages:
                tk.Radiobutton(
                    self.dialog,
                    text=text,
                    variable=self.var,
                    value=value,
                    bg='#17212b',
                    fg='white',
                    selectcolor='#2b5278',
                    font=('Arial', 10),
                    activebackground='#17212b',
                    activeforeground='white'
                ).pack(anchor='w', padx=50, pady=3)
        
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = tk.Frame(self.dialog, bg='#17212b')
        btn_frame.pack(pady=30)
        
        tk.Button(
            btn_frame,
            text="‚úÖ –°–æ–∑–¥–∞—Ç—å",
            command=self.ok_clicked,
            bg='#4CAF50',
            fg='white',
            font=('Arial', 11, 'bold'),
            padx=20,
            pady=5,
            relief='flat',
            cursor='hand2'
        ).pack(side='left', padx=10)
        
        tk.Button(
            btn_frame,
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            command=self.cancel_clicked,
            bg='#708499',
            fg='white',
            font=('Arial', 10),
            padx=20,
            pady=5,
            relief='flat',
            cursor='hand2'
        ).pack(side='left', padx=10)
    
    def ok_clicked(self):
        self.result = self.var.get()
        self.dialog.destroy()
    
    def cancel_clicked(self):
        self.dialog.destroy()

class SimpleProgressWindow:
    def __init__(self, parent):
        self.window = tk.Toplevel(parent)
        self.window.title("–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        self.window.geometry("350x120")
        self.window.configure(bg='#17212b')
        self.window.transient(parent)
        self.window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        x = parent.winfo_rootx() + 100
        y = parent.winfo_rooty() + 100
        self.window.geometry(f"+{x}+{y}")
        
        tk.Label(
            self.window,
            text="üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–∞",
            bg='#17212b',
            fg='white',
            font=('Arial', 12, 'bold')
        ).pack(pady=20)
        
        self.status_label = tk.Label(
            self.window,
            text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...",
            bg='#17212b',
            fg='#708499',
            font=('Arial', 10)
        )
        self.status_label.pack(pady=(0, 20))
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress = ttk.Progressbar(self.window, mode='indeterminate')
        self.progress.pack(pady=10, padx=20, fill='x')
        self.progress.start()
    
    def update_status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_label.config(text=message)
        self.window.update()
    
    def close(self):
        self.window.destroy()

def main():
    root = tk.Tk()
    app = TelegramChatFinalWorking(root)
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
    root.update_idletasks()
    x = (root.winfo_screenwidth() // 2) - (root.winfo_width() // 2)
    y = (root.winfo_screenheight() // 2) - (root.winfo_height() // 2)
    root.geometry(f"+{x}+{y}")
    
    root.mainloop()

if __name__ == "__main__":
    main()

